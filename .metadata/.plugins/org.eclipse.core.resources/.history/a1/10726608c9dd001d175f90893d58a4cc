package com.profileservice.service;

import java.util.ArrayList;

//import java.util.ArrayList;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.modelmapper.ModelMapper;
//import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestHeader;

import com.profileservice.dao.AdressDao;
import com.profileservice.dao.RegistrationDao;
import com.profileservice.dto.AdressDto;
import com.profileservice.dto.Authorities;
import com.profileservice.dto.RegistrationDto;
import com.profileservice.entity.AddressEntity;
import com.profileservice.entity.RegistrationEntity;
import com.profileservice.exception.CustomException;
import com.profileservice.exception.InvalidEnteredPassword;
import com.profileservice.exception.NotValidOTPException;
import com.profileservice.exception.UserAlreadyExist;

@Service
public class RegistrationServiceImp implements RegistationService {

	@Autowired
	private RegistrationDao registrationDao;
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private SmsService service;
	@Autowired
	private HttpSession httpSession;
	@Autowired
	OtpGenerator otpGenerator;
	
	@Autowired
	AdressDao adressDao;

	private static Logger logger= Logger.getLogger(RegistrationServiceImp.class);

	public RegistrationEntity saveUser(RegistrationDto registrationdto) {
		//logger.info("Start of save user method !!");

		ModelMapper modelMapper = new ModelMapper();
		RegistrationEntity registrationEntity = new RegistrationEntity();

		otpGenerator.setOtp();

		if (!validateOTP(registrationdto.getPhoneNumber(), registrationdto.getUserOtp())) {
			throw new NotValidOTPException("Invalid OTP or Phone number");
		} else {
			if (registrationdto == null)

				throw new RuntimeException("null found in registration plss check");

			else
				modelMapper.map(registrationdto, registrationEntity);

			if (registrationDao.existsByUserName(registrationEntity.getUserName())
					|| registrationDao.existsByPhoneNumber(registrationEntity.getPhoneNumber())) {
				throw new UserAlreadyExist("UserName or Phone number is already exists");
			}

			Authorities authorities = new Authorities();
			authorities.setRole("USER");
			List<Authorities> authority = new ArrayList<Authorities>();
			authority.add(authorities);
			registrationEntity.setAuthorities(authority);

			if (!(registrationEntity.getPassword().equals(registrationEntity.getConfirmPassword()))) {
				throw new InvalidEnteredPassword("Password and confirm password must be match");
			}
			registrationEntity.setPassword(passwordEncoder.encode(registrationEntity.getPassword()));
			registrationEntity.setConfirmPassword(passwordEncoder.encode(registrationEntity.getConfirmPassword()));

			logger.info("End of save user method !!");

			return registrationDao.save(registrationEntity);
		}

	}

	public boolean validateOTP(String phoneNum, Integer otpNumber) {
	 logger.info("User validate Otp method start.. ");
		// get OTP from cache

		Integer cacheOTP = (Integer) httpSession.getAttribute("otpGntd");

		System.out.println(cacheOTP + ">>>>>>>>>>>>>>>>>>>>>>");

		String phoneNumInSession = (String) httpSession.getAttribute("phoneNumber");

		if (cacheOTP != null && cacheOTP.equals(otpNumber) && phoneNum.equals(phoneNumInSession)) {
			httpSession.invalidate();

			 logger.info("End of validate Otp method(Valid Otp) !!");
			return true;
		}
		logger.info("End of validate Otp method (Invalid Otp)!!");
		return false;
	}

	public ResponseEntity<RegistrationEntity> getMyProfile(@RequestHeader String userName) {

		return new ResponseEntity<RegistrationEntity>(registrationDao.findByUserName(userName), HttpStatus.OK);

	}
	
	public RegistrationEntity updateUser(RegistrationEntity registrationEntity) {

		logger.info("Admin update user method started..");
		/*
		 * int userId=adminRegistrationDto.getAdminId(); AdminRegistrationEntity
		 * adminRegistrationEntity= adminRegistrationDao.findByAdminId(userId);
		 * ModelMapper modelMapper = new ModelMapper();
		 * 
		 * 
		 * if (adminRegistrationDto == null)
		 * 
		 * throw new RuntimeException("null found in registration plss check");
		 * 
		 * else modelMapper.map(adminRegistrationDto, adminRegistrationEntity);
		 */
		String password=registrationEntity.getPassword();
		String confirmPassword=registrationEntity.getConfirmPassword();
		registrationEntity.setPassword(password);
		registrationEntity.setConfirmPassword(confirmPassword);
		logger.info("Admin update user method end..");
		
		return registrationDao.save(registrationEntity);
	}
	public AddressEntity saveAddress(String userName, AdressDto addressDto) {
		logger.info("Save address method start..");
		ModelMapper mapper = new ModelMapper();
		AddressEntity addressEntity = new AddressEntity();
		if (!(addressDto == null)) {
			mapper.map(addressDto, addressEntity);
		}
		addressEntity.setUserName(userName);

		if (addressEntity.isCurrentAddress()) {
			List<AddressEntity> addressList = adressDao.findByUserName(userName);
			if (!(addressList == null)) {
				for (AddressEntity address : addressList) {
					if (address.isCurrentAddress()) {
						String id = address.getId();
						address.setId(id);
						address.setCurrentAddress(false);

						adressDao.save(address);
					}
				}

			}

		}

		logger.info("End of save address method..");
		return adressDao.save(addressEntity);
	}

	@Override
	public List<AddressEntity> getMyAddress(String userName) {
		logger.info("Start of get address method..");
		if(!adressDao.existsByUserName(userName))
			throw new CustomException("You don't have any address added. Please add ");
		
		
		logger.info("end of get address method..");
		return adressDao.findByUserName(userName);
	}

}
